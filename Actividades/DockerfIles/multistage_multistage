# Imagen base de PostgreSQL
FROM postgres:latest AS db

# Instalar Go, Maven y OpenJDK 11
FROM golang:latest AS go

RUN apt-get update && apt-get install -y \
    maven \
    openjdk-11-jdk

# Imagen final
FROM ubuntu:latest
RUN apt install -y libpq5
# Copiar PostgreSQL, Go, Maven y OpenJDK 8 desde las im치genes anteriores
COPY --from=db /usr/local/bin /usr/local/bin
COPY --from=db /usr/local/lib /usr/local/lib
COPY --from=db /usr/libexec/ /usr/libexec/
COPY --from=db /usr/lib/postgresql/ /usr/lib/postgresql/
#COPY --from=db /usr/lib/postgresql/15/bin /usr/lib/postgresql/15/bin
COPY --from=go /usr/local/go /usr/local/go
COPY --from=go /usr/share/maven /usr/share/maven
COPY --from=go /usr/lib/jvm/java-11-openjdk-amd64 /usr/lib/jvm/java-11-openjdk-amd64
USER root

ENV POSTGRES_HOST_AUTH_METHOD=trust
COPY /web/ /WEB/
COPY /db/ /db/
COPY /words /WORDS/
#COPY /db/words.sql /docker-entrypoint-initdb.d/words.sql
# Configurar la base de datos de PostgreSQL
ENV POSTGRES_USER postgres
ENV POSTGRES_PASSWORD password
ENV POSTGRES_DB dbname

WORKDIR /WORDS
RUN /usr/share/maven/bin/mvn verify

#COPY /db/words.sql /docker-entrypoint-initdb.d/words.sql
RUN /usr/lib/postgresql/15/bin/psql words.sql

# Exponer el puerto 5432 para la base de datos de PostgreSQL
EXPOSE 8080
EXPOSE 80
EXPOSE 5432

# Copiar el binario ejecutable de la aplicaci칩n desde la imagen de Golang

# Ejecutar la aplicaci칩n y conectarse a la base de datos de PostgreSQL
#WORKDIR /

# Compilar la aplicaci칩n Go y empaquetarla como un binario ejecutable
RUN /usr/local/go build dispatcher.go
CMD ["java", "-Xmx8m", "-Xms8m", "-jar", "/WORDS/target/words.jar","/WEB/dispatcher"]